"use strict";

exports.__esModule = true;
exports.ReplaceVariables = exports.ussdCollectGatherType = exports.ConActions = exports.ConType = exports.ConOperator = exports.Kinds = void 0;
const Kinds = {
  externalService: 'externalService',
  log: 'log',
  control: 'control',
  ussdCollect: 'ussdCollect',
  ussdSay: 'ussdSay',
  ussdLanguage: 'ussdLanguage',
  gather: 'gather',
  ussdMessage: 'ussdSay'
};
exports.Kinds = Kinds;
const ConOperator = {
  eq: 'equals',
  ne: 'notequal',
  gt: 'greater',
  gte: 'greaterEqual',
  lt: 'less',
  lte: 'lessEqual'
};
exports.ConOperator = ConOperator;
const ConType = {
  numeric: 'numeric'
};
exports.ConType = ConType;
const ConActions = {};
exports.ConActions = ConActions;
const ussdCollectGatherType = {
  menu: 'menu',
  collectdigits: 'collectdigits'
}; // replace the variable in the string

exports.ussdCollectGatherType = ussdCollectGatherType;

const ReplaceVariables = (strName, appdata = {}, tempdata = {}) => {
  if (!strName) return '';
  const regex = /\$([A-Za-z]+[A-Za-z0-9_]*)/gi;
  const retvalue = strName.match(regex);

  if (retvalue) {
    let retstr = strName;
    retvalue.forEach(item => {
      if (appdata[item]) {
        retstr = retstr.replace(item, appdata[item]);
      } else if (tempdata[item]) {
        retstr = retstr.replace(item, tempdata[item]);
      }
    });
    return retstr;
  }

  return strName;
};

exports.ReplaceVariables = ReplaceVariables;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9Db250cm9sbGVyL2NvbW1vbi5qcyJdLCJuYW1lcyI6WyJLaW5kcyIsImV4dGVybmFsU2VydmljZSIsImxvZyIsImNvbnRyb2wiLCJ1c3NkQ29sbGVjdCIsInVzc2RTYXkiLCJ1c3NkTGFuZ3VhZ2UiLCJnYXRoZXIiLCJ1c3NkTWVzc2FnZSIsIkNvbk9wZXJhdG9yIiwiZXEiLCJuZSIsImd0IiwiZ3RlIiwibHQiLCJsdGUiLCJDb25UeXBlIiwibnVtZXJpYyIsIkNvbkFjdGlvbnMiLCJ1c3NkQ29sbGVjdEdhdGhlclR5cGUiLCJtZW51IiwiY29sbGVjdGRpZ2l0cyIsIlJlcGxhY2VWYXJpYWJsZXMiLCJzdHJOYW1lIiwiYXBwZGF0YSIsInRlbXBkYXRhIiwicmVnZXgiLCJyZXR2YWx1ZSIsIm1hdGNoIiwicmV0c3RyIiwiZm9yRWFjaCIsIml0ZW0iLCJyZXBsYWNlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsS0FBSyxHQUFHO0FBQ25CQyxFQUFBQSxlQUFlLEVBQUUsaUJBREU7QUFFbkJDLEVBQUFBLEdBQUcsRUFBRSxLQUZjO0FBR25CQyxFQUFBQSxPQUFPLEVBQUUsU0FIVTtBQUluQkMsRUFBQUEsV0FBVyxFQUFFLGFBSk07QUFLbkJDLEVBQUFBLE9BQU8sRUFBRSxTQUxVO0FBTW5CQyxFQUFBQSxZQUFZLEVBQUUsY0FOSztBQU9uQkMsRUFBQUEsTUFBTSxFQUFFLFFBUFc7QUFRbkJDLEVBQUFBLFdBQVcsRUFBRTtBQVJNLENBQWQ7O0FBV0EsTUFBTUMsV0FBVyxHQUFHO0FBQ3pCQyxFQUFBQSxFQUFFLEVBQUUsUUFEcUI7QUFFekJDLEVBQUFBLEVBQUUsRUFBRSxVQUZxQjtBQUd6QkMsRUFBQUEsRUFBRSxFQUFFLFNBSHFCO0FBSXpCQyxFQUFBQSxHQUFHLEVBQUUsY0FKb0I7QUFLekJDLEVBQUFBLEVBQUUsRUFBRSxNQUxxQjtBQU16QkMsRUFBQUEsR0FBRyxFQUFFO0FBTm9CLENBQXBCOztBQVNBLE1BQU1DLE9BQU8sR0FBRztBQUNyQkMsRUFBQUEsT0FBTyxFQUFFO0FBRFksQ0FBaEI7O0FBSUEsTUFBTUMsVUFBVSxHQUFHLEVBQW5COztBQUNBLE1BQU1DLHFCQUFxQixHQUFHO0FBQ25DQyxFQUFBQSxJQUFJLEVBQUUsTUFENkI7QUFFbkNDLEVBQUFBLGFBQWEsRUFBRTtBQUZvQixDQUE5QixDLENBS1A7Ozs7QUFDTyxNQUFNQyxnQkFBZ0IsR0FBRyxDQUFDQyxPQUFELEVBQVVDLE9BQU8sR0FBRyxFQUFwQixFQUF3QkMsUUFBUSxHQUFHLEVBQW5DLEtBQTBDO0FBQ3hFLE1BQUksQ0FBQ0YsT0FBTCxFQUFjLE9BQU8sRUFBUDtBQUNkLFFBQU1HLEtBQUssR0FBRyw4QkFBZDtBQUNBLFFBQU1DLFFBQVEsR0FBR0osT0FBTyxDQUFDSyxLQUFSLENBQWNGLEtBQWQsQ0FBakI7O0FBQ0EsTUFBSUMsUUFBSixFQUFjO0FBQ1osUUFBSUUsTUFBTSxHQUFHTixPQUFiO0FBQ0FJLElBQUFBLFFBQVEsQ0FBQ0csT0FBVCxDQUFrQkMsSUFBRCxJQUFVO0FBQ3pCLFVBQUlQLE9BQU8sQ0FBQ08sSUFBRCxDQUFYLEVBQW1CO0FBQ2pCRixRQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0csT0FBUCxDQUFlRCxJQUFmLEVBQXFCUCxPQUFPLENBQUNPLElBQUQsQ0FBNUIsQ0FBVDtBQUNELE9BRkQsTUFFTyxJQUFJTixRQUFRLENBQUNNLElBQUQsQ0FBWixFQUFvQjtBQUN6QkYsUUFBQUEsTUFBTSxHQUFHQSxNQUFNLENBQUNHLE9BQVAsQ0FBZUQsSUFBZixFQUFxQk4sUUFBUSxDQUFDTSxJQUFELENBQTdCLENBQVQ7QUFDRDtBQUNGLEtBTkQ7QUFPQSxXQUFPRixNQUFQO0FBQ0Q7O0FBQ0QsU0FBT04sT0FBUDtBQUNELENBaEJNIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEtpbmRzID0ge1xuICBleHRlcm5hbFNlcnZpY2U6ICdleHRlcm5hbFNlcnZpY2UnLFxuICBsb2c6ICdsb2cnLFxuICBjb250cm9sOiAnY29udHJvbCcsXG4gIHVzc2RDb2xsZWN0OiAndXNzZENvbGxlY3QnLFxuICB1c3NkU2F5OiAndXNzZFNheScsXG4gIHVzc2RMYW5ndWFnZTogJ3Vzc2RMYW5ndWFnZScsXG4gIGdhdGhlcjogJ2dhdGhlcicsXG4gIHVzc2RNZXNzYWdlOiAndXNzZFNheScsXG59O1xuXG5leHBvcnQgY29uc3QgQ29uT3BlcmF0b3IgPSB7XG4gIGVxOiAnZXF1YWxzJyxcbiAgbmU6ICdub3RlcXVhbCcsXG4gIGd0OiAnZ3JlYXRlcicsXG4gIGd0ZTogJ2dyZWF0ZXJFcXVhbCcsXG4gIGx0OiAnbGVzcycsXG4gIGx0ZTogJ2xlc3NFcXVhbCcsXG59O1xuXG5leHBvcnQgY29uc3QgQ29uVHlwZSA9IHtcbiAgbnVtZXJpYzogJ251bWVyaWMnLFxufTtcblxuZXhwb3J0IGNvbnN0IENvbkFjdGlvbnMgPSB7fTtcbmV4cG9ydCBjb25zdCB1c3NkQ29sbGVjdEdhdGhlclR5cGUgPSB7XG4gIG1lbnU6ICdtZW51JyxcbiAgY29sbGVjdGRpZ2l0czogJ2NvbGxlY3RkaWdpdHMnLFxufTtcblxuLy8gcmVwbGFjZSB0aGUgdmFyaWFibGUgaW4gdGhlIHN0cmluZ1xuZXhwb3J0IGNvbnN0IFJlcGxhY2VWYXJpYWJsZXMgPSAoc3RyTmFtZSwgYXBwZGF0YSA9IHt9LCB0ZW1wZGF0YSA9IHt9KSA9PiB7XG4gIGlmICghc3RyTmFtZSkgcmV0dXJuICcnO1xuICBjb25zdCByZWdleCA9IC9cXCQoW0EtWmEtel0rW0EtWmEtejAtOV9dKikvZ2k7XG4gIGNvbnN0IHJldHZhbHVlID0gc3RyTmFtZS5tYXRjaChyZWdleCk7XG4gIGlmIChyZXR2YWx1ZSkge1xuICAgIGxldCByZXRzdHIgPSBzdHJOYW1lO1xuICAgIHJldHZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmIChhcHBkYXRhW2l0ZW1dKSB7XG4gICAgICAgIHJldHN0ciA9IHJldHN0ci5yZXBsYWNlKGl0ZW0sIGFwcGRhdGFbaXRlbV0pO1xuICAgICAgfSBlbHNlIGlmICh0ZW1wZGF0YVtpdGVtXSkge1xuICAgICAgICByZXRzdHIgPSByZXRzdHIucmVwbGFjZShpdGVtLCB0ZW1wZGF0YVtpdGVtXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldHN0cjtcbiAgfVxuICByZXR1cm4gc3RyTmFtZTtcbn07XG4iXX0=