"use strict";

exports.__esModule = true;
exports.default = void 0;

var _common = require("./common");

var _util = require("../util");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = (0, _util.getLogger)().debugContext('ctrlStep');

let ControlSteps = function ControlSteps() {
  _defineProperty(this, "process", async (step, appdata = {}, tempdata = {}) => {
    const data = Object.assign({}, appdata);
    const temp = Object.assign({}, tempdata);
    let continueTo = null; // check for the conditions and loop through

    let isValid = true; // default to through

    const {
      conditions,
      actions
    } = step; // loop through to check all the conditions are met

    conditions.forEach(cod => {
      // equal to
      const {
        operand1,
        operand2,
        type: mtype
      } = cod.comparison;
      const first = (0, _common.ReplaceVariables)(operand1, data, temp);
      const second = (0, _common.ReplaceVariables)(operand2, data, temp);
      let op1 = first;
      let op2 = second;

      if (mtype === _common.ConType.numeric) {
        op1 = parseFloat(first, 10);
        op2 = parseFloat(second, 10);
      }

      debug(`operand1 = ${op1}, operand2 = ${op2}, type=${cod.operator}`);

      switch (cod.operator) {
        case _common.ConOperator.eq:
          isValid = isValid && op1 === op2;
          break;

        case _common.ConOperator.gt:
          isValid = isValid && op1 > op2;
          break;

        case _common.ConOperator.lt:
          isValid = isValid && op1 < op2;
          break;

        case _common.ConOperator.gte:
          isValid = isValid && op1 >= op2;
          break;

        case _common.ConOperator.lte:
          isValid = isValid && op1 <= op2;
          break;

        case _common.ConOperator.ne:
          isValid = isValid && op1 !== op2;
          break;

        default:
          isValid = isValid && op1 === op2;
          break;
      }
    }); // take Actions

    if (isValid) {
      // eslint-disable-next-line
      for (let j = 0; j < actions.length; j++) {
        const act = actions[j];

        if (act.assign) {
          const expr = (0, _common.ReplaceVariables)(act.assign.expression, data, temp);

          if (act.assign.varScope === 'app') {
            data[`$${act.assign.varName}`] = expr;
          } else {
            temp[`$${act.assign.varName}`] = expr;
          }
        } // capture


        if (act.capture) {
          try {
            const {
              data: capdata,
              regex
            } = act.capture;
            const strdata = (0, _common.ReplaceVariables)(capdata, data, temp);
            const mex = new RegExp(regex);
            const value = strdata.match(mex);

            if (value) {
              data[`$${act.capture.varName}`] = value[0]; // eslint-disable-line
            }
          } catch (error) {
            console.error(error); // eslint-disable-line
          }
        } // check if there is contineTo


        if (act.continueTo) {
          continueTo = act.continueTo.target;
          break;
        }
      }
    }

    return {
      data,
      temp,
      continueTo
    };
  });
};

exports.default = ControlSteps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,