{"version":3,"sources":["../../test/rvd.test.js"],"names":["describe","skip","it","done","rvd","RVDController","should","not","exist","error","equal","message","redisparam","be","host","port","family","defaultWorkSpace","defaultRVDJson","rvdjson","SESSION_TIMEOUT","defaultErrorMsg","entryPoint","msisdn","cellid","shortcode","sessionid","then","result","status","have","property","ok","catch","err"],"mappings":"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","sourcesContent":["import should from 'should';\nimport { RVDController } from '../src';\nimport rvdjson from '../../smpp/src/state/state.json';\n\ndescribe.skip('RVD testing http functionality', () => {\n  describe('testing http functionality with REDIS', () => {\n    it('should throw an error without Redis parameters', (done) => {\n      try {\n        const rvd = new RVDController({});\n        should.not.exist(rvd);\n      } catch (error) {\n        should.exist(error);\n        'Redis parameters are required'.should.equal(error.message);\n      }\n      done();\n    });\n    it('should throw error with incorrect Redis parameters', (done) => {\n      try {\n        const rvd = new RVDController({\n          redisparam: 'test',\n        });\n        should.not.exist(rvd);\n      } catch (error) {\n        should.exist(error);\n        'Invalid Redis parameters'.should.be.equal(error.message);\n      }\n      done();\n    });\n    it('should connect to Redis database', (done) => {\n      try {\n        const rvd = new RVDController({\n          redisparam: {\n            host: '127.0.0.1',\n            port: 6379,\n            family: 4,\n          },\n        });\n        should.exist(rvd);\n      } catch (error) {\n        should.not.exist(error);\n      }\n      done();\n    });\n    it('should create a session in the redis database', (done) => {\n      try {\n        const rvd = new RVDController({\n          redisparam: {\n            host: '127.0.0.1',\n            port: 6379,\n            family: 4,\n          },\n          defaultWorkSpace: '/Users/jamo/Documents/Projects/Node/PAiC/RVDNode/packages/ussd/state',\n          defaultRVDJson: rvdjson,\n        });\n        should.exist(rvd);\n        rvd.SESSION_TIMEOUT.should.be.equal(40);\n        rvd.defaultErrorMsg.should.be.equal('Error processing request');\n        rvd\n          .entryPoint({\n            msisdn: '123456',\n            cellid: '',\n            shortcode: '530',\n            sessionid: '23412341234123423',\n          })\n          .then((result) => {\n            should.exist(result);\n            result.status.should.equal(200);\n            result.should.have.property('message').be.ok();\n            done();\n          })\n          .catch((err) => {\n            should.not.exist(err);\n            done();\n          });\n      } catch (error) {\n        should.not.exist(error);\n      }\n      done();\n    });\n  });\n});\n"],"file":"rvd.test.js"}