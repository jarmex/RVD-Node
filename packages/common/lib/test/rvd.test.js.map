{"version":3,"sources":["../../test/rvd.test.js"],"names":["should","chai","describe","it","done","rvd","RVDController","SESSION_TIMEOUT","error","exist","equal","message","redisparam","not","host","port","family","defaultWorkSpace","defaultRVDJson","rvdjson","defaultErrorMsg","eqal","result","entryPoint","msisdn","cellid","shortcode","sessionid"],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport { RVDController } from '../src';\nimport rvdjson from '../../smpp/src/state/state.json';\n\nconst should = chai.should();\n\ndescribe('RVD testing http functionality', () => {\n  describe('testing http functionality with REDIS', () => {\n    it('should throw an error without Redis parameters', (done) => {\n      try {\n        const rvd = new RVDController({});\n        done(rvd.SESSION_TIMEOUT);\n      } catch (error) {\n        should.exist(error);\n        'Redis parameters are required'.should.equal(error.message);\n      }\n      done();\n    });\n    it('should throw error with incorrect Redis parameters', (done) => {\n      try {\n        const rvd = new RVDController({\n          redisparam: 'test',\n        });\n        should.not.exist(rvd);\n      } catch (error) {\n        should.exist(error);\n        'Invalid Redis parameters'.should.equal(error.message);\n      }\n      done();\n    });\n    it('should connect to Redis database', (done) => {\n      try {\n        const rvd = new RVDController({\n          redisparam: {\n            host: '127.0.0.1',\n            port: 6379,\n            family: 4,\n          },\n        });\n        should.exist(rvd);\n      } catch (error) {\n        should.not.exist(error);\n      }\n      done();\n    });\n    it('should create a session in the redis database', async (done) => {\n      try {\n        const rvd = new RVDController({\n          redisparam: {\n            host: '127.0.0.1',\n            port: 6379,\n            family: 4,\n          },\n          defaultWorkSpace: '/Users/jamo/Documents/Projects/Node/PAiC/RVDNode/packages/ussd/state',\n          defaultRVDJson: rvdjson,\n        });\n        should.exist(rvd);\n        rvd.SESSION_TIMEOUT.should.equal(40);\n        rvd.defaultErrorMsg.should.eqal('Error processing request');\n        const result = await rvd.entryPoint({\n          msisdn: '123456',\n          cellid: '',\n          shortcode: '530',\n          sessionid: '23412341234123423',\n        });\n        should.exist(result);\n      } catch (error) {\n        should.not.exist(error);\n      }\n      done();\n    });\n  });\n});\n"],"file":"rvd.test.js"}