{"version":3,"sources":["../../src/ControlSteps.js"],"names":["debug","printerror","getContext","ControlSteps","step","appdata","tempdata","moduleName","data","Object","assign","temp","continueTo","isValid","conditions","actions","reAction","conditionExpression","conditionResults","forEach","cod","operand1","operand2","type","mtype","comparison","first","second","op1","op2","ConType","numeric","parseFloat","name","toLowerCase","operator","ConOperator","eq","gt","lt","gte","lte","ne","conditionSplit","split","prevAnd","prevOr","nameOrcond","resultExist","undefined","j","length","act","expr","expression","varScope","varName","capture","capdata","regex","strdata","mex","RegExp","value","match","error","message","target"],"mappings":"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","sourcesContent":["import { ConOperator, ConType } from './Constants';\nimport ReplaceVariables from './ReplaceVariables';\nimport getLogger from './logger';\nimport ensureArray from './ensureArray';\n\nconst { debug, printerror } = getLogger().getContext('ctrlStep');\n\nexport default class ControlSteps {\n  process = async (step, appdata = {}, tempdata = {}, moduleName) => {\n    const data = Object.assign({}, appdata);\n    const temp = Object.assign({}, tempdata);\n    let continueTo = null;\n    // check for the conditions and loop through\n    let isValid = true; // default to through\n    const { conditions, actions: reAction, conditionExpression } = step;\n    // get the conditionExpression\n    const conditionResults = {};\n    // loop through to check all the conditions are met\n    if (conditions) {\n      // each condition\n      conditions.forEach((cod) => {\n        // equal to\n        const { operand1, operand2, type: mtype } = cod.comparison;\n        const first = ReplaceVariables(operand1, data, temp);\n        const second = ReplaceVariables(operand2, data, temp);\n        let op1 = first;\n        let op2 = second;\n        if (mtype === ConType.numeric) {\n          op1 = parseFloat(first, 10);\n          op2 = parseFloat(second, 10);\n        }\n        // debug(`isValid before expression evaluation = ${isValid}`);\n        const name = (cod.name || '').toLowerCase();\n        switch (cod.operator) {\n          case ConOperator.eq:\n            conditionResults[name] = op1 === op2;\n            break;\n          case ConOperator.gt:\n            conditionResults[name] = op1 > op2;\n            break;\n          case ConOperator.lt:\n            conditionResults[name] = op1 < op2;\n            break;\n          case ConOperator.gte:\n            conditionResults[name] = op1 >= op2;\n            break;\n          case ConOperator.lte:\n            conditionResults[name] = op1 <= op2;\n            break;\n          case ConOperator.ne:\n            conditionResults[name] = op1 !== op2;\n            break;\n          default:\n            conditionResults[name] = op1 === op2;\n            break;\n        }\n        debug(\n          `${cod.name}: ${op1} \"${cod.operator}\" ${op2} = ${\n            conditionResults[name]\n          }`,\n        );\n      });\n    }\n    debug('%o', conditionResults);\n    // check for the condition expression\n    if (conditionExpression) {\n      debug(conditionExpression);\n      const conditionSplit = conditionExpression.toLowerCase().split(' ');\n      let prevAnd = false;\n      let prevOr = false;\n      // C1 AND C2 AND C3 => c1 and c2 and c3 => ['c1', 'and', 'c2', 'or', 'c3' ]\n      conditionSplit.forEach((nameOrcond) => {\n        if (nameOrcond === 'and') {\n          // hold onto the and!!\n          prevAnd = true;\n          prevOr = false;\n        } else if (nameOrcond === 'or') {\n          prevOr = true;\n          prevAnd = false;\n        } else {\n          const resultExist = conditionResults[nameOrcond];\n          // check if result computed exist\n          if (resultExist !== undefined) {\n            if (prevAnd) {\n              // the operand was AND\n              isValid = isValid && conditionResults[nameOrcond];\n              prevAnd = false;\n            } else if (prevOr) {\n              // the operand was OR\n              isValid = isValid || conditionResults[nameOrcond];\n              prevOr = false;\n            } else {\n              isValid = resultExist;\n            }\n          }\n        }\n      });\n    }\n    debug(`isValid = ${isValid}`);\n    // take Actions\n    if (isValid) {\n      const actions = ensureArray(reAction);\n      // eslint-disable-next-line\n      for (let j = 0; j < actions.length; j++) {\n        const act = actions[j];\n        if (act.assign) {\n          const expr = ReplaceVariables(act.assign.expression, data, temp);\n          if (act.assign.varScope === 'app') {\n            data[`$${act.assign.varName}`] = expr;\n          } else {\n            temp[`$${act.assign.varName}`] = expr;\n          }\n        }\n        // capture\n        if (act.capture) {\n          try {\n            const { data: capdata, regex } = act.capture;\n            const strdata = ReplaceVariables(capdata, data, temp);\n            const mex = new RegExp(regex, 'g');\n            const value = strdata.match(mex);\n            if (value) {\n              data[`$${act.capture.varName}`] = value[0]; // eslint-disable-line\n            }\n          } catch (error) {\n            printerror('ERROR: %s', error.message);\n          }\n        }\n        // check if there is contineTo\n        if (act.continueTo) {\n          const { target } = act.continueTo;\n          if (!target) {\n            printerror('ERROR: No target module specified');\n          } else if (target && target === moduleName) {\n            printerror('ERROR: Cyclic module execution detected');\n          } else {\n            continueTo = target;\n          }\n          break;\n        }\n      }\n    }\n\n    return {\n      data,\n      temp,\n      continueTo,\n    };\n  };\n}\n"],"file":"ControlSteps.js"}