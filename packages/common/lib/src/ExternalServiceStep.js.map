{"version":3,"sources":["../../src/ExternalServiceStep.js"],"names":["debug","printerror","printinfo","getContext","ExternalServiceSteps","step","appdata","tempdata","data","Object","assign","temp","headers","httpHeaders","contentType","urlParams","requestBody","url","forEach","hd","name","value","params","urlp","body","replacebody","JSON","parse","error","message","nurl","config","method","axiosdata","assignments","ass","valueExtractor","accessOperations","querypath","aco","kind","terminal","expression","substr","chm","jsonpath","query","Array","isArray","length","scope","destVariable"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAM;AAAEA,EAAAA,KAAF;AAASC,EAAAA,UAAT;AAAqBC,EAAAA;AAArB,IAAmC,uBAAYC,UAAZ,CAAuB,QAAvB,CAAzC;;IAEqBC,oB;mCACT,OAAOC,IAAP,EAAaC,OAAO,GAAG,EAAvB,EAA2BC,QAAQ,GAAG,EAAtC,KAA6C;AACrD,UAAMC,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,OAAlB,CAAb;AACA,UAAMK,IAAI,GAAGF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,QAAlB,CAAb;AAEA,UAAMK,OAAO,GAAG,EAAhB;AACA,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,WAAf;AAA4BC,MAAAA,SAA5B;AAAuCC,MAAAA,WAAvC;AAAoDC,MAAAA;AAApD,QAA4DZ,IAAlE,CALqD,CAMrD;;AACA,QAAIQ,WAAJ,EAAiB;AACfA,MAAAA,WAAW,CAACK,OAAZ,CAAqBC,EAAD,IAAQ;AAC1BP,QAAAA,OAAO,CAACO,EAAE,CAACC,IAAJ,CAAP,GAAmB,+BAAiBD,EAAE,CAACE,KAApB,EAA2Bb,IAA3B,EAAiCG,IAAjC,CAAnB;AACD,OAFD;AAGD,KAXoD,CAYrD;;;AACA,QAAIG,WAAJ,EAAiB;AACfF,MAAAA,OAAO,CAAC,cAAD,CAAP,GAA0BE,WAA1B;AACD,KAfoD,CAgBrD;;;AACA,UAAMQ,MAAM,GAAG,EAAf;;AACA,QAAIP,SAAJ,EAAe;AACbA,MAAAA,SAAS,CAACG,OAAV,CAAmBK,IAAD,IAAU;AAC1BD,QAAAA,MAAM,CAACC,IAAI,CAACH,IAAN,CAAN,GAAoB,+BAAiBG,IAAI,CAACF,KAAtB,EAA6Bb,IAA7B,EAAmCG,IAAnC,CAApB,CAD0B,CACoC;AAC/D,OAFD;AAGD,KAtBoD,CAuBrD;;;AACA,UAAMa,IAAI,GAAG,EAAb;;AACA,QAAIR,WAAJ,EAAiB;AACf;AACA,UAAI;AACF,cAAMS,WAAW,GAAG,+BAAiBT,WAAjB,EAA8BR,IAA9B,EAAoCG,IAApC,CAApB;AACAF,QAAAA,MAAM,CAACC,MAAP,CAAcc,IAAd,EAAoBE,IAAI,CAACC,KAAL,CAAWF,WAAX,CAApB;AACD,OAHD,CAGE,OAAOG,KAAP,EAAc;AACd5B,QAAAA,KAAK,CAACgB,WAAD,CAAL;AACAf,QAAAA,UAAU,CAAC,WAAD,EAAc2B,KAAK,CAACC,OAApB,CAAV;AACD;AACF,KAlCoD,CAoCrD;;;AACA,QAAIZ,GAAJ,EAAS;AACP;AACA,YAAMa,IAAI,GAAG,+BAAiBb,GAAjB,EAAsBT,IAAtB,EAA4BG,IAA5B,CAAb;;AAEA,UAAI;AACF,cAAMoB,MAAM,GAAG;AACbC,UAAAA,MAAM,EAAE3B,IAAI,CAAC2B,MAAL,IAAe,KADV;AAEbpB,UAAAA,OAFa;AAGbU,UAAAA,MAHa;AAIbL,UAAAA,GAAG,EAAEa,IAJQ;AAKbtB,UAAAA,IAAI,EAAEgB;AALO,SAAf;AAOAxB,QAAAA,KAAK,CAAC,IAAD,EAAO+B,MAAP,CAAL;AACA,cAAM;AAAEvB,UAAAA,IAAI,EAAEyB;AAAR,YAAsB,MAAM,oBAAMF,MAAN,CAAlC;;AACA,YAAI1B,IAAI,CAAC6B,WAAT,EAAsB;AACpB;AACA7B,UAAAA,IAAI,CAAC6B,WAAL,CAAiBhB,OAAjB,CAA0BiB,GAAD,IAAS;AAChC,gBAAIA,GAAG,CAACC,cAAR,EAAwB;AACtB,oBAAM;AAAEC,gBAAAA;AAAF,kBAAuBF,GAAG,CAACC,cAAjC,CADsB,CAEtB;;AACA,kBAAIE,SAAS,GAAG,EAAhB;AACAD,cAAAA,gBAAgB,CAACnB,OAAjB,CAA0BqB,GAAD,IAAS;AAChC,oBAAIA,GAAG,CAACC,IAAJ,KAAa,QAAb,IAAyBD,GAAG,CAACE,QAAJ,KAAiB,KAA9C,EAAqD;AACnDH,kBAAAA,SAAS,IAAIC,GAAG,CAACG,UAAjB;AACD;;AACD,oBAAIH,GAAG,CAACC,IAAJ,KAAa,OAAjB,EAA0B;AACxB;AACAF,kBAAAA,SAAS,IAAIC,GAAG,CAACG,UAAjB;AACD;AACF,eARD,EAJsB,CAatB;;AACA,kBAAIJ,SAAJ,EAAe;AACb;AACA,oBAAIA,SAAS,CAAC,CAAD,CAAT,KAAiB,GAArB,EAA0B;AACxBA,kBAAAA,SAAS,GAAGA,SAAS,CAACK,MAAV,CAAiB,CAAjB,CAAZ;AACD;;AACD,oBAAIC,GAAG,GAAGC,kBAASC,KAAT,CAAeb,SAAf,EAA0BK,SAA1B,CAAV;;AAEA,oBAAIS,KAAK,CAACC,OAAN,CAAcJ,GAAd,KAAsBA,GAAG,CAACK,MAAJ,KAAe,CAAzC,EAA4C;AAC1CL,kBAAAA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAT,CAD0C,CAC5B;AACf;;AACD1C,gBAAAA,SAAS,CAAE,GAAEoC,SAAU,MAAKM,GAAI,EAAvB,CAAT;;AACA,oBAAIT,GAAG,CAACe,KAAJ,KAAc,QAAlB,EAA4B;AAC1BvC,kBAAAA,IAAI,CAAE,IAAGwB,GAAG,CAACgB,YAAa,EAAtB,CAAJ,GAA+BP,GAA/B;AACD,iBAFD,MAEO;AACLpC,kBAAAA,IAAI,CAAE,IAAG2B,GAAG,CAACgB,YAAa,EAAtB,CAAJ,GAA+BP,GAA/B;AACD;AACF;AACF;AACF,WAjCD;AAkCD,SA9CC,CA+CF;;AACD,OAhDD,CAgDE,OAAOhB,KAAP,EAAc;AACd3B,QAAAA,UAAU,CAAC,WAAD,EAAc2B,KAAK,CAACC,OAApB,CAAV;AACD;AACF;;AACD,WAAO;AACLrB,MAAAA,IADK;AAELG,MAAAA;AAFK,KAAP;AAID,G","sourcesContent":["import axios from 'axios';\nimport jsonpath from 'jsonpath';\nimport ReplaceVariables from './ReplaceVariables';\nimport getLogger from './logger';\n\nconst { debug, printerror, printinfo } = getLogger().getContext('extSrv');\n\nexport default class ExternalServiceSteps {\n  process = async (step, appdata = {}, tempdata = {}) => {\n    const data = Object.assign({}, appdata);\n    const temp = Object.assign({}, tempdata);\n\n    const headers = {};\n    const { httpHeaders, contentType, urlParams, requestBody, url } = step;\n    // add the header if it exist\n    if (httpHeaders) {\n      httpHeaders.forEach((hd) => {\n        headers[hd.name] = ReplaceVariables(hd.value, data, temp);\n      });\n    }\n    // if there is content header\n    if (contentType) {\n      headers['Content-Type'] = contentType;\n    }\n    // params\n    const params = {};\n    if (urlParams) {\n      urlParams.forEach((urlp) => {\n        params[urlp.name] = ReplaceVariables(urlp.value, data, temp); // check the variables\n      });\n    }\n    // requestBody\n    const body = {};\n    if (requestBody) {\n      // console.log(step.requestBody);\n      try {\n        const replacebody = ReplaceVariables(requestBody, data, temp);\n        Object.assign(body, JSON.parse(replacebody));\n      } catch (error) {\n        debug(requestBody);\n        printerror('ERROR: %s', error.message);\n      }\n    }\n\n    // if the url exist proceed\n    if (url) {\n      // replace all the variables in the url\n      const nurl = ReplaceVariables(url, data, temp);\n\n      try {\n        const config = {\n          method: step.method || 'GET',\n          headers,\n          params,\n          url: nurl,\n          data: body,\n        };\n        debug('%o', config);\n        const { data: axiosdata } = await axios(config);\n        if (step.assignments) {\n          // extract the values into the variables\n          step.assignments.forEach((ass) => {\n            if (ass.valueExtractor) {\n              const { accessOperations } = ass.valueExtractor;\n              // concatenate the query path\n              let querypath = '';\n              accessOperations.forEach((aco) => {\n                if (aco.kind === 'object' && aco.terminal === false) {\n                  querypath += aco.expression;\n                }\n                if (aco.kind === 'array') {\n                  // work on the array\n                  querypath += aco.expression;\n                }\n              });\n              // check if there is a query path\n              if (querypath) {\n                // check if the first leter is ., if so remove it;\n                if (querypath[0] === '.') {\n                  querypath = querypath.substr(1);\n                }\n                let chm = jsonpath.query(axiosdata, querypath);\n\n                if (Array.isArray(chm) && chm.length === 1) {\n                  chm = chm[0]; // eslint-disable-line\n                }\n                printinfo(`${querypath} = ${chm}`);\n                if (ass.scope === 'module') {\n                  temp[`$${ass.destVariable}`] = chm;\n                } else {\n                  data[`$${ass.destVariable}`] = chm;\n                }\n              }\n            }\n          });\n        }\n        // EXTRACT DATA HERE\n      } catch (error) {\n        printerror('ERROR: %s', error.message);\n      }\n    }\n    return {\n      data,\n      temp,\n    };\n  };\n}\n"],"file":"ExternalServiceStep.js"}