{"version":3,"sources":["../../src/RVDNode.js"],"names":["freadAsync","fs","readFile","debug","printinfo","printerror","getContext","RVDNode","options","shortcode","retvalue","rvdjs","cache","get","JSON","parse","sid","workSpaceDir","config","spath","result","set","error","message","stringify","rvdjson","moduleName","$core_From","msisdn","$cell_id","cellid","$shortcode","data","cRvd","readStates","allnodes","nodes","find","item","name","moduleLabel","label","process","env","DefaultMsg","next","continueTo","retmsg","rvdmodule","steps","i","length","stepName","stepKind","kind","Kinds","control","ctrlStep","ControlSteps","retdata","temp","Object","assign","externalService","extStep","ExternalServiceSteps","exdata","log","logStep","LogSteps","ussdCollect","colData","UssdCollectSteps","ucollect","responses","ussdSay","uSay","UssdSaySteps","uMsg","rvdProcess","input","sessionInfo","menu","collectdigits","ussdCollectGatherType","gatherType","uinput","parseInt","mm","mappings","rep","digits","collectVariable","scope","defaultRVD","currentModule","header","startNodeName","session","state","Error","rest"],"mappings":"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","sourcesContent":["import { promisify } from 'util';\nimport fs from 'fs';\nimport { join } from 'path';\nimport { Kinds, ussdCollectGatherType } from './Constants';\nimport UssdSaySteps from './UssdSay';\nimport UssdCollectSteps from './UssdCollectStep';\nimport LogSteps from './LogStep';\nimport ExternalServiceSteps from './ExternalServiceStep';\nimport ControlSteps from './ControlSteps';\nimport { isObjEmpty } from './utils';\nimport getLogger from './logger';\n\n// create a promise version of the fs readFile\nconst freadAsync = promisify(fs.readFile);\n\nconst { debug, printinfo, printerror } = getLogger().getContext('rvd');\n\nexport default class RVDNode {\n  /**\n   *Creates an instance of RVDNode.\n   * @param {Object} options The options are session, cache (Redis), state, rvdjson (default)\n   * @memberof RVDNode\n   */\n  constructor(options = {}) {\n    const {\n      session = {},\n      cache,\n      state = {},\n      rvdjson = {},\n      config = {},\n    } = options;\n    this.sessionInfo = session;\n    this.temp = {};\n    if (!cache) {\n      throw new Error('The cache cannot be empty');\n    }\n    this.cache = cache;\n    if (!isObjEmpty(session)) {\n      const { responses, ...rest } = session;\n      this.responses = responses;\n      this.data = Object.assign({}, rest, state);\n    } else {\n      this.data = state;\n      this.responses = null;\n    }\n    this.rvdjson = rvdjson;\n    this.config = config;\n  }\n\n  /**\n   * Read the state file containing all the USSD definitions based on the short code.\n   * It caches the result to Redis database. If the shortcode does not exist, it loads the default\n   * state file from the project folder\n   * @param {String} shortcode the USSD shortcode mapping to the state file\n   * @memberof RVDNode\n   */\n  readStates = async (shortcode) => {\n    let retvalue = null;\n    try {\n      const rvdjs = await this.cache.get(shortcode);\n      if (rvdjs) {\n        return JSON.parse(rvdjs);\n      }\n      const { sid, workSpaceDir } = this.config;\n\n      if (sid && workSpaceDir) {\n        try {\n          const spath = join(workSpaceDir, sid, 'state');\n          const result = await freadAsync(spath, 'utf8');\n          await this.cache.set(shortcode, result);\n          retvalue = JSON.parse(result);\n        } catch (error) {\n          printerror('ERROR: %s', error.message);\n        }\n      } else {\n        printerror('Invalid SID or WORKSPACE_DIR');\n      }\n    } catch (error) {\n      printerror('ERROR: %s', error.message);\n    }\n    if (retvalue) {\n      return retvalue;\n    }\n    debug('................caching the shortcode to memory.................');\n    await this.cache.set(shortcode, JSON.stringify(this.rvdjson));\n    return this.rvdjson;\n  };\n\n  /**\n   *Process the RVD for USSD\n   * @param {String} moduleName the name of the module to load for the USSD flow\n   * @memberof RVDNode\n   */\n  rvdProcess = async (moduleName) => {\n    const { $core_From: msisdn, $cell_id: cellid, $shortcode } = this.data;\n    const cRvd = await this.readStates($shortcode);\n    const allnodes = cRvd.nodes.find((item) => item.name === moduleName);\n    const moduleLabel = allnodes ? allnodes.label : '';\n    printinfo(\n      `MODULE: ${moduleName}, NAME: ${moduleLabel}, MSISDN=${msisdn}, cellid=${cellid}`,\n    );\n    if (!allnodes) {\n      return {\n        message: process.env.DefaultMsg,\n        data: null,\n        next: false,\n      }; // for the error message\n    }\n\n    let continueTo = null;\n    const retmsg = { next: false, rvdmodule: { moduleName, moduleLabel } };\n    const { steps } = allnodes;\n\n    // process all the steps in the module. Check for each of the steps and call the\n    // appropriate control to process it.\n    // eslint-disable-next-line\n    for (let i = 0; i < steps.length; i++) {\n      const item = steps[i];\n      // need to stored in the database\n      retmsg.rvdmodule.stepName = item.name;\n      retmsg.rvdmodule.stepKind = item.kind;\n      debug(`processing step: ${item.name || ''}, kind: ${item.kind}`);\n      // process the ControlStep\n      if (item.kind === Kinds.control) {\n        const ctrlStep = new ControlSteps();\n        // eslint-disable-next-line\n        const retdata = await ctrlStep.process(\n          item,\n          this.data,\n          this.temp,\n          moduleName,\n        );\n\n        this.data = Object.assign(this.data, retdata.data);\n        this.temp = Object.assign(this.temp, retdata.temp);\n        if (retdata.continueTo) {\n          // eslint-disable-next-line\n          continueTo = retdata.continueTo;\n          break;\n        }\n      } else if (item.kind === Kinds.externalService) {\n        // process the external service\n        const extStep = new ExternalServiceSteps();\n        // eslint-disable-next-line\n        const exdata = await extStep.process(item, this.data, this.temp);\n\n        this.data = Object.assign(this.data, exdata.data);\n        this.temp = Object.assign(this.temp, exdata.temp);\n      } else if (item.kind === Kinds.log) {\n        // process the logSteps\n        const logStep = new LogSteps();\n        logStep.process(item, this.data, this.temp);\n      } else if (item.kind === Kinds.ussdCollect) {\n        // process the ussdCollect steps\n        const colData = new UssdCollectSteps();\n        // eslint-disable-next-line\n        const ucollect = await colData.process(item, this.data, this.temp);\n        retmsg.message = ucollect.message;\n        retmsg.next = true;\n        this.data = Object.assign(this.data, {\n          responses: ucollect.responses,\n        });\n        break;\n      } else if (item.kind === Kinds.ussdSay) {\n        // process the ussd say steps\n        const uSay = new UssdSaySteps();\n        // eslint-disable-next-line\n        const uMsg = await uSay.process(item, this.data, this.temp);\n        retmsg.message = uMsg.message;\n        retmsg.next = false;\n      } else {\n        printinfo('INFO %o', item);\n      }\n    }\n    if (continueTo) {\n      return this.rvdProcess(continueTo);\n    }\n    // return the message\n    retmsg.data = { ...this.data };\n    return retmsg;\n  };\n\n  /**\n   * check if a user session already exist. If so pick the information from the session\n   * and process it. If the user session does not exist, it assume that the input is the shortcode\n   * and queries the database using the shortcode\n   * @param {String} input the USSD input string\n   * @memberof RVDNode\n   */\n  rvd = async (input) => {\n    // check if the session exist\n    if (this.sessionInfo) {\n      // check if there input is in relation with a response\n      if (this.responses) {\n        const { menu, collectdigits } = ussdCollectGatherType;\n        // map through to get the next module\n        if (this.responses.gatherType === menu) {\n          const uinput = parseInt(input, 10);\n          const mm = this.responses.mappings.find(\n            (rep) => parseInt(rep.digits, 10) === uinput,\n          );\n          if (mm) {\n            return this.rvdProcess(mm.next);\n          }\n          // PROCESS WHEN INFO DOES NOT EXIST\n        } else if (this.responses.gatherType === collectdigits) {\n          const { next, collectVariable, scope } = this.responses.collectdigits;\n          if (scope === 'application') {\n            this.data[`$${collectVariable}`] = input;\n          } else {\n            this.temp[`$${collectVariable}`] = input;\n          }\n          return this.rvdProcess(next);\n        }\n      } else {\n        return this.rvdProcess(this.sessionInfo.moduleName);\n      }\n    }\n    const defaultRVD = await this.readStates(this.data.$shortcode);\n\n    const currentModule = defaultRVD.header.startNodeName;\n    return this.rvdProcess(currentModule);\n  };\n}\n"],"file":"RVDNode.js"}