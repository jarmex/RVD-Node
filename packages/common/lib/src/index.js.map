{"version":3,"sources":["../../src/index.js"],"names":["debug","printinfo","printerror","getContext","RVDController","params","sessionid","msisdn","sessionsubdata","redis","get","JSON","parse","error","message","data","setex","SESSION_TIMEOUT","stringify","pRespons","reply","updateOnly","rvdmodule","next","toDatabase","$core_From","cellid","$cell_id","$session_id","imsi","$imsi","shortcode","$shortcode","flowend","replyMessage","emit","dbobject","request","input","sid","subSession","getSessionData","state","$core_Body","$cellid","rvdController","RVDNode","session","cache","rvdjson","config","workSpaceDir","defaultWorkSpace","response","rvd","Freeflow","saveSessionData","defaultErrorMsg","isSaveTransEnabled","saveTransaction","status","header","Expires","Pragma","redisparam","USSD_SAVE_TRANSACTION","defaultRVDJson","Error","Redis","keyPrefix","EventEmitter"],"mappings":"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","sourcesContent":["import Redis from 'ioredis';\nimport { EventEmitter } from 'events';\nimport RVDNode from './RVDNode';\nimport getLogger, { LoggerClass } from './logger';\n\nconst { debug, printinfo, printerror } = getLogger().getContext('flow');\n\nexport class RVDController extends EventEmitter {\n  constructor(params = {}) {\n    super(params);\n    const {\n      redisparam,\n      SESSION_TIMEOUT = 40,\n      USSD_SAVE_TRANSACTION = 'NONE',\n      defaultRVDJson = {},\n      defaultWorkSpace,\n      defaultErrorMsg,\n    } = params;\n    if (!redisparam) {\n      throw new Error('Redis parameters are required');\n    }\n    if (typeof redisparam !== 'object') {\n      throw new Error('Invalid Redis parameters');\n    }\n    this.redis = new Redis({ keyPrefix: 'paic:', ...redisparam });\n    // is save transaction enabled. possible values ALL, END, or default NONE\n    this.isSaveTransEnabled = USSD_SAVE_TRANSACTION;\n    this.SESSION_TIMEOUT = SESSION_TIMEOUT;\n    this.rvdjson = defaultRVDJson;\n    this.defaultWorkSpace = defaultWorkSpace;\n    this.defaultErrorMsg = defaultErrorMsg || 'Error processing request';\n  }\n\n  /**\n   * Read the current subscriber session from the database.\n   * If the session doesn't exist return null\n   * @param {String} sessionid The USSD GW sessionID\n   * @param {String} msisdn The subscriber number\n   * @memberof USSDFlowController\n   */\n  getSessionData = async (sessionid, msisdn) => {\n    try {\n      // check if the subscriber key exist\n      const sessionsubdata = await this.redis.get(sessionid || msisdn);\n      if (sessionsubdata) {\n        return JSON.parse(sessionsubdata);\n      }\n    } catch (error) {\n      printerror('ERROR: %s', error.message);\n    }\n    return null;\n  };\n\n  /**\n   * Save the subscriber session to database with the default timeout\n   * @param {String} sessionid the USSD GW session ID\n   * @param {String} msisdn The subscriber number\n   * @param {Object} data the information to be save to database\n   * @memberof USSDFlowController\n   */\n  saveSessionData = async (sessionid, msisdn, data = {}) => {\n    try {\n      await this.redis.setex(sessionid || msisdn, this.SESSION_TIMEOUT, JSON.stringify(data));\n    } catch (error) {\n      printerror('ERROR: %s', error.message);\n    }\n  };\n\n  /**\n   * emit the data to be save to the transaction table\n   * @param {Object} pResponse The object contains all data to be stored in the database\n   * @param {String} reply the reply message to the subscriber\n   * @memberof USSDFlowController\n   */\n  saveTransaction = async (pRespons, reply, updateOnly = false) => {\n    try {\n      const { rvdmodule = {}, data, next } = pRespons;\n      const toDatabase = { ...rvdmodule };\n      toDatabase.msisdn = data.$core_From;\n      toDatabase.cellid = data.$cell_id;\n      toDatabase.sessionid = data.$session_id;\n      toDatabase.imsi = data.$imsi;\n      toDatabase.shortcode = data.$shortcode;\n      toDatabase.flowend = next;\n      toDatabase.replyMessage = reply;\n      if (updateOnly) {\n        this.emit('updatetrans', { dbobject: { ...toDatabase } });\n      } else {\n        this.emit('savetrans', { dbobject: { ...toDatabase } });\n      }\n    } catch (error) {\n      printerror(`ERROR: ${error.message} - saveTransaction`);\n    }\n  };\n\n  /**\n   * The endpoint to process the RVD Node. The main entry point for the application.\n   * The sid is the default SID for the shortcode. if the sid does not exist, the rvdjson will be\n   * used. NOTE: if the session does not exist, the input is the same as the shortcode\n   * @param {Object} request An object containing the msisdn, cellid,sessionid,input,imsi & sid\n   * @memberof USSDFlowController\n   */\n  entryPoint = async (request) => {\n    try {\n      const { msisdn, imsi, cellid, sessionid, input, sid, shortcode } = request;\n      printinfo('REQ: %o', request);\n      // get the session. if the session does not exist then process the first stage of rvd\n      const subSession = await this.getSessionData(sessionid || msisdn);\n      // application state\n      const state = {\n        $core_From: msisdn,\n        $cell_id: cellid,\n        $session_id: sessionid,\n        $imsi: imsi,\n        $core_Body: input,\n        $cellid: cellid,\n      };\n      if (!subSession) {\n        // the first time request, the input is the same as the shortcode\n        state.$shortcode = shortcode || input;\n      }\n      const rvdController = new RVDNode({\n        session: subSession,\n        state,\n        cache: this.redis,\n        rvdjson: this.rvdjson,\n        config: {\n          workSpaceDir: this.defaultWorkSpace,\n          sid,\n        },\n      });\n\n      const response = await rvdController.rvd(input);\n\n      const Freeflow = response.next ? 'FC' : 'FB';\n\n      // check if storing session is needed\n      if (response.data && Freeflow === 'FC') {\n        await this.saveSessionData(sessionid, msisdn, response.data);\n      }\n      let reply = response.message;\n      if (!reply) {\n        debug(`${msisdn}: No reply message found. Replying default message`);\n        reply = this.defaultErrorMsg;\n      }\n\n      if (this.isSaveTransEnabled === 'ALL') {\n        await this.saveTransaction(response, reply);\n      } else if (this.isSaveTransEnabled === 'END' && Freeflow === 'FB') {\n        await this.saveTransaction(response, reply);\n      } else if (this.isSaveTransEnabled === 'UPDATE') {\n        await this.saveTransaction(response, reply, true);\n      } else if (this.isSaveTransEnabled === 'STARTEND') {\n        if (!subSession || Freeflow === 'FB') {\n          await this.saveTransaction(response, reply);\n        }\n      }\n\n      return {\n        status: 200,\n        header: {\n          Freeflow,\n          Expires: -1,\n          'Cache-Control': 'max-age=0',\n          Pragma: 'no-cache',\n        },\n        message: reply,\n      };\n    } catch (error) {\n      printerror(error.message);\n      return {\n        status: 401,\n        header: {\n          Freeflow: 'FB',\n          Expires: -1,\n          'Cache-Control': 'max-age=0',\n          Pragma: 'no-cache',\n        },\n        message: this.defaultErrorMsg,\n      };\n    }\n  };\n}\n\nexport { LoggerClass };\n\nexport { default as ensureArray } from './ensureArray';\n"],"file":"index.js"}